// Upload imagse from stack to SLM before each frame in MDA.
// Image corresponds to specific channel: generally fullfield
// illumination for imaging purposes, patterning for activation
//
// Pariksheet Nanda <pariksheet.nanda@...> July 2014
// Edited by Tyler Ross 10/15/2018
// Edited by Soichi Hirokawa beginning 03/2020
//
// License: Public Domain

import ij.io.Opener; // To load TIFF stack file from disk.
import ij.ImagePlus; // To hold the opened image.
import ij.ImageStack; // To access stack pixels.

root = "C:/Users/rplab_sh/Documents/rp_group_git/active_matter/active_stress/microscope_files/";

// Mask details to modify:
mask_start = "laser_";
activation_pattern = "circle";
mask_end = "_activation_fullfield_MTillumination.tif";

// Load file from disk.
Opener opener = new Opener();
// Nomenclature of TIFF stack: pattern and number of frames
ImagePlus imp = opener.openImage(root + mask_start + activation_pattern + mask_end);

// Get stack info.
ImageStack stack = imp.getImageStack();
// n_projections = stack.getSize();

// Get the installed name of the SLM.
projector = mmc.getSLMDevice();

// Boilerplate when using runnables.
acq.clearRunnables();

// Runnable to upload each image to the SLM.
runnable = new Runnable() {

      print("Script Active");
      public void run() {
      	// Pick mask based on Channel Configuration
      	if (mmc.getCurrentConfig("Channel").equals("Laser")) {
      		roi=1;
      		print("Firing red laser.");
      	} else if (mmc.getCurrentConfig("Channel").equals("YFP_532nm")){
      		roi=1;
      		print("Firing YFP laser");
      	} else if (mmc.getCurrentConfig("Channel").equals("DLP_Blue")){
      		roi=2;
      	} else if (mmc.getCurrentConfig("Channel").equals("DLP_Red")){
      		// Delay projector pattern change according to filter delay
      		roi=3;
      	} else if (mmc.getCurrentConfig("Channel").equals("DLP_Yellow")){
      		roi=2;
      	}
			// Get the pixels of the stack slice.
			pixels = stack.getPixels(roi);
			// Upload the image to the SLM.
			mmc.setSLMImage(projector, pixels);
			// Activate the uploaded image on the SLM.
			mmc.displaySLMImage(projector);
			// Set delay time for SLM exposure
			mmc.setSLMExposure(projector, 500); 
			print("Activated ROI " + roi);
			mmc.sleep(800);
   	}
};
// Dimension order is frame, position, channel, slice.
acq.attachRunnable(-1, 0, -1, 0, runnable);